exampleKernelFunction {
data_in {
# Default values are set to invalid to be able to detect the not-suppleied values

directionWriteOrRead	= "invalid";
HostDoWrite				= "invalid";
HostDoRead				= "invalid";
memAccessFlag			= "invalid";
baseTypeSize			= "invalid";
baseTypeMultiple		= "invalid";
baseTypeXDimMultiple	= "invalid";
baseTypeYDimMultiple	= "invalid";
deviceMultiple			= "invalid";
isGlobalMemory			= "invalid";
isConstantMemory		= "invalid";
isLocalMemory			= "invalid";
isRangeScalable			= "invalid";
isNewOrResident			= "invalid";
residentFuncIdx			= "invalid";
residentFuncArgIdx		= "invalid";
residentArgRef			= "invalid";
requiresSubBuffering	= "invalid";
equalSubBufferSizes		= "invalid";


}
}
# Memory config to be used for global RW buffers
pfaces_rw_global{
	directionWriteOrRead	= "false";
	HostDoWrite				= "false";
	HostDoRead				= "false";
	memAccessFlag			= "CL_MEM_READ_WRITE";
	baseTypeSize			= "4";
	baseTypeMultiple		= "1";
	baseTypeXDimMultiple	= "0";
	baseTypeYDimMultiple	= "0";
	deviceMultiple			= "false";
	isGlobalMemory			= "true";
	isConstantMemory		= "false";
	isLocalMemory			= "false";
	isRangeScalable			= "false";
	requiresSubBuffering	= "false";
	equalSubBufferSizes		= "false";
	isNewOrResident			= "true";	
}

# Memory config to be used for constant RO buffers
pfaces_ro_constant{
	directionWriteOrRead	= "true";
	HostDoWrite				= "true";
	HostDoRead				= "false";
	memAccessFlag			= "CL_MEM_READ_ONLY";
	baseTypeSize			= "4";
	baseTypeMultiple		= "1";
	baseTypeXDimMultiple	= "0";
	baseTypeYDimMultiple	= "0";
	deviceMultiple			= "false";
	isGlobalMemory			= "false";
	isConstantMemory		= "true";
	isLocalMemory			= "false";
	isRangeScalable			= "false";
	requiresSubBuffering	= "false";
	equalSubBufferSizes		= "false";
	isNewOrResident			= "true";	
}